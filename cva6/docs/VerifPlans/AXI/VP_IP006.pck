(VHandshake_Process
p0
ccopy_reg
_reconstructor
p1
(cvp_pack
Ip
p2
c__builtin__
object
p3
Ntp4
Rp5
(dp6
Vprop_count
p7
I3
sVname
p8
g0
sVprop_list
p9
(dp10
sVip_num
p11
I8
sVwid_order
p12
I8
sVrfu_dict
p13
(dp14
sVrfu_list
p15
(lp16
(V000_Stability 
p17
g1
(cvp_pack
Prop
p18
g3
Ntp19
Rp20
(dp21
Vitem_count
p22
I2
sg8
g17
sVtag
p23
VVP_IP008_P000
p24
sVitem_list
p25
(dp26
sg12
I0
sg15
(lp27
(V000
p28
g1
(cvp_pack
Item
p29
g3
Ntp30
Rp31
(dp32
g8
V000
p33
sg23
VVP_IP008_P000_I000
p34
sVdescription
p35
VAll signals must remain stable when [Ax | x]VALID is asserted and [Ax | x]READY is LOW
p36
sVpurpose
p37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.2.2)
p38
sVverif_goals
p39
VCheck to ensure that all the signals does not change while [Ax | x]VALID is asserted.
p40
sVcoverage_loc
p41
V
p42
sVpfc
p43
I4
sVtest_type
p44
I4
sVcov_method
p45
I2
sVcores
p46
I56
sVcomments
p47
g42
sVstatus
p48
g42
sVsimu_target_list
p49
(lp50
sg15
(lp51
sVrfu_list_2
p52
(lp53
sg13
(dp54
Vlock_status
p55
I0
ssbtp56
a(V001
p57
g1
(g29
g3
Ntp58
Rp59
(dp60
g8
V001
p61
sg23
VVP_IP008_P000_I001
p62
sg35
V[Ax | x]VALID must remain asserted until [Ax | x]READY is HIGH
p63
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.2.1)
p64
sg39
VCheck to ensure that [Ax | x]VALID does not change while [Ax | x]READY is asserted.
p65
sg41
g42
sg43
I4
sg44
I4
sg45
I2
sg46
I56
sg47
g42
sg48
g42
sg49
(lp66
sg15
(lp67
sg52
(lp68
sg13
(dp69
g55
I0
ssbtp70
asVrfu_list_1
p71
(lp72
sg52
(lp73
sg13
(dp74
sbtp75
a(V001_Timing
p76
g1
(g18
g3
Ntp77
Rp78
(dp79
g22
I8
sg8
g76
sg23
VVP_IP008_P001
p80
sg25
(dp81
sg12
I1
sg15
(lp82
(V000
p83
g1
(g29
g3
Ntp84
Rp85
(dp86
g8
V000
p87
sg23
VVP_IP008_P001_I000
p88
sg35
VThe Manager must not wait for the Subordinate to assert ARREADY before asserting ARVALID
p89
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p90
sg39
VEnsure that no errors are encountered as the testbench injects random Ready-to-Valid delays.  There are two cases to consider:  \u000a                                                \u000aARREADY is asserted on or after same cycle as ARVALID\u000aARREADY is asserted and deasserted during an interval when ARVALID is de-asserted
p91
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp92
sg15
(lp93
sg52
(lp94
sg13
(dp95
g55
I0
ssbtp96
a(V001
p97
g1
(g29
g3
Ntp98
Rp99
(dp100
g8
V001
p101
sg23
VVP_IP008_P001_I001
p102
sg35
VThe Subordinate must wait for both ARVALID and ARREADY to be asserted before it asserts RVALID to indicate that valid data is available.
p103
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p104
sg39
VCheck to ensure that every read data occur have the same ID to an outstanding read transaction.
p105
sg41
g42
sg43
I4
sg44
I-1
sg45
I2
sg46
I56
sg47
g42
sg48
g42
sg49
(lp106
sg15
(lp107
sg52
(lp108
sg13
(dp109
g55
I0
ssbtp110
a(V002
p111
g1
(g29
g3
Ntp112
Rp113
(dp114
g8
V002
p115
sg23
VVP_IP008_P001_I002
p116
sg35
VThe Manager must not wait for the Subordinate to assert AWREADY before asserting AWVALID or WVALID.
p117
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p118
sg39
VEnsure that no errors are encountered as the testbench injects random Ready-to-Valid delays. There are two cases to consider:  \u000a                                        \u000aAWREADY is asserted on or after same cycle as AWVALID or WVALID\u000aAWREADY is asserted and deasserted during an interval when AWVALID or WVALID is de-asserted
p119
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp120
sg15
(lp121
sg52
(lp122
sg13
(dp123
g55
I0
ssbtp124
a(V003
p125
g1
(g29
g3
Ntp126
Rp127
(dp128
g8
V003
p129
sg23
VVP_IP008_P001_I003
p130
sg35
VThe Manager must not wait for the Subordinate to assert WREADY before asserting AWVALID or WVALID.
p131
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p132
sg39
VEnsure that no errors are encountered as the testbench injects random Ready-to-Valid delays. There are two cases to consider:  \u000a                                                \u000aWREADY is asserted on or after same cycle as AWVALID or WVALID\u000aWREADY is asserted and deasserted during an interval when AWVALID or WVALID is de-asserted
p133
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp134
sg15
(lp135
sg52
(lp136
sg13
(dp137
g55
I0
ssbtp138
a(V004
p139
g1
(g29
g3
Ntp140
Rp141
(dp142
g8
V004
p143
sg23
VVP_IP008_P001_I004
p144
sg35
VThe Subordinate must wait for AWVALID, AWREADY, WVALID,  WREADY and also WLAST to be asserted before asserting BVALID
p145
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p146
sg39
VCheck to ensure that each response occur have the same ID as an outstanding write transaction that has been completed.
p147
sg41
g42
sg43
I4
sg44
I-1
sg45
I2
sg46
I56
sg47
g42
sg48
g42
sg49
(lp148
sg15
(lp149
sg52
(lp150
sg13
(dp151
g55
I0
ssbtp152
a(V005
p153
g1
(g29
g3
Ntp154
Rp155
(dp156
g8
V005
p157
sg23
VVP_IP008_P001_I005
p158
sg35
VThe Subordinate must not wait for the Manager to assert [B | R]READY before asserting [B | R]VALID
p159
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A3.3.1)
p160
sg39
VNo specific \u201cobservable checks\u201d to be made in simulation. Testbench will always provide response data independently of [B | R]READY.
p161
sg41
g42
sg43
I0
sg44
I10
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp162
sg15
(lp163
sg52
(lp164
sg13
(dp165
g55
I0
ssbtp166
a(V006
p167
g1
(g29
g3
Ntp168
Rp169
(dp170
g8
V006
p171
sg23
VVP_IP008_P001_I006
p172
sg35
VOn Atomic Operation, the Subordinate must wait for both AWVALID and AWREADY to be asserted before it asserts RVALID to indicate that valid data is available.
p173
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section E1.1.9)
p174
sg39
VNo specific \u201cobservable checks\u201d to be made in simulation. Testbench will always serve read data after the write address handshake.
p175
sg41
g42
sg43
I-1
sg44
I-1
sg45
I-1
sg46
I24
sg47
g42
sg48
g42
sg49
(lp176
sg15
(lp177
sg52
(lp178
sg13
(dp179
g55
I0
ssbtp180
a(V007
p181
g1
(g29
g3
Ntp182
Rp183
(dp184
g8
V007
p185
sg23
VVP_IP008_P001_I007
p186
sg35
VOn Atomic Operation, the Manager must not wait for the Subordinate to assert RVALID before asserting WVALID.
p187
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section E1.1.9)
p188
sg39
VEnsure that no errors are encountered as the testbench injects random valid write data.  There are three cases to consider:  \u000a                                                \u000aWVALID is asserted on ther same cycle as RVALID\u000aWVALID is asserted after the cycle when RVALID is asserted\u000aWVALID is asserted before the cycle when RVALID is asserted
p189
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I24
sg47
g42
sg48
g42
sg49
(lp190
sg15
(lp191
sg52
(lp192
sg13
(dp193
g55
I0
ssbtp194
asg71
(lp195
sg52
(lp196
sg13
(dp197
sbtp198
a(V002_Ordering_Model
p199
g1
(g18
g3
Ntp200
Rp201
(dp202
g22
I6
sg8
g199
sg23
VVP_IP008_P002
p203
sg25
(dp204
sg12
I2
sg15
(lp205
(V000
p206
g1
(g29
g3
Ntp207
Rp208
(dp209
g8
V000
p210
sg23
VVP_IP008_P002_I000
p211
sg35
VTransaction requests on the same channel, with the same ID and destination are guaranteed to remain in order.
p212
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p213
sg39
VNo specific \u201cobservable checks\u201d to be made in simulation. The RM will check the data value and the xLAST assertion will ensure that the length of each transaction is respected
p214
sg41
g42
sg43
I3
sg44
I3
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp215
sg15
(lp216
sg52
(lp217
sg13
(dp218
g55
I0
ssbtp219
a(V001
p220
g1
(g29
g3
Ntp221
Rp222
(dp223
g8
V001
p224
sg23
VVP_IP008_P002_I001
p225
sg35
VTransaction responses with the same ID are returned in the same order as the requests were issued
p226
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p227
sg39
VNo specific \u201cobservable checks\u201d to be made in simulation. The RM will check the data value and the Xlast assertion will ensure that the length of each transaction is respected.
p228
sg41
g42
sg43
I3
sg44
I3
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp229
sg15
(lp230
sg52
(lp231
sg13
(dp232
g55
I0
ssbtp233
a(V002
p234
g1
(g29
g3
Ntp235
Rp236
(dp237
g8
V002
p238
sg23
VVP_IP008_P002_I002
p239
sg35
VIf the CVA6 requires ordering between transactions that have no ordering guarantee, the Manager must wait to receive a response to the first transaction before issuing the second transaction.
p240
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p241
sg39
VNo specific \u201cobservable checks\u201d to be made in simulation.
p242
sg41
g42
sg43
I-1
sg44
I-1
sg45
I-1
sg46
I56
sg47
g42
sg48
g42
sg49
(lp243
sg15
(lp244
sg52
(lp245
sg13
(dp246
g55
I0
ssbtp247
a(V003
p248
g1
(g29
g3
Ntp249
Rp250
(dp251
g8
V003
p252
sg23
VVP_IP008_P002_I003
p253
sg35
VThe READ and WRITE channels can have multiple outstanding transactions.
p254
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p255
sg39
VCoverage of multiple outstanding transactions.
p256
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp257
sg15
(lp258
sg52
(lp259
sg13
(dp260
g55
I0
ssbtp261
a(V004
p262
g1
(g29
g3
Ntp263
Rp264
(dp265
g8
V004
p266
sg23
VVP_IP008_P002_I004
p267
sg35
VTransaction responses with the different ID can returne in any order.
p268
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p269
sg39
VEnsure that no errors are encountered as the testbench injects read data transaction out of order.  There are two cases to consider:  \u000a\u000aTwo transaction, One with an ID equal to 0, the other with ID equal to 1\u000aMore than two transaction, we can have for each ID more than one transaction
p270
sg41
g42
sg43
I3
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp271
sg15
(lp272
sg52
(lp273
sg13
(dp274
Vlock_status
p275
I0
ssbtp276
a(V005
p277
g1
(g29
g3
Ntp278
Rp279
(dp280
g8
V005
p281
sg23
VVP_IP008_P002_I005
p282
sg35
VCVA6 can accepte interleaved Read Data.
p283
sg37
Vhttps://developer.arm.com/documentation/ihi0022/hc - (Section A6.1)
p284
sg39
VCoverage of multiple interleaved Read Data.
p285
sg41
g42
sg43
I0
sg44
I4
sg45
I10
sg46
I56
sg47
g42
sg48
g42
sg49
(lp286
sg15
(lp287
sg52
(lp288
sg13
(dp289
g275
I0
ssbtp290
asg71
(lp291
sg52
(lp292
sg13
(dp293
sbtp294
asVrfu_list_0
p295
(lp296
sg71
(lp297
sVvptool_gitrev
p298
V$Id$
p299
sbtp300
.